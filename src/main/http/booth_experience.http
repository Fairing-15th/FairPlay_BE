### ===============================

### 변수 설정
@baseUrl = http://localhost:8080
@boothId = 1
@experienceId = 3
@reservationId = 2
@userId = 1
@access_token = eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIzOCIsImVtYWlsIjoiZTFAZi5jb20iLCJyb2xlIjoi7ZaJ7IKsIOuLtOuLueyekCIsInJvbGVJZCI6MiwiaWF0IjoxNzU0NzA5MjAzLCJleHAiOjE3NTQ3MDk4MDN9.JjfyTPD-1VVbfYDWRZwiu7c-NFfSEls6XhicMaHjt6M
@booth_access_token = {{booth_access_token}}


### 부스 체험 API 테스트

### ===============================
### 0. 부스 신청/등록 (전제 조건)
### ===============================

### 0-1. 부스 신청 (일반 사용자)
POST {{baseUrl}}/api/booth/applications
Content-Type: application/json

{
  "eventId": 8,
  "boothTypeId": 1,
  "boothTitle": "테크 체험 부스",
  "boothDescription": "최신 IT 기술을 체험할 수 있는 부스입니다. VR, AR, AI 등 다양한 기술 체험 가능",
  "managerName": "김부스",
  "email": "b1@f.com",
  "contactNumber": "010-1234-5678",
  "officialUrl": "https://techbooth.example.com",
  "startDate": "2025-02-15",
  "endDate": "2025-02-16",
  "isDeleted": false
}

### 0-2. 부스 신청 목록 조회 (행사 관리자)
GET {{baseUrl}}/api/booth/applications?eventId=8
Content-Type: application/json
Authorization: Bearer {{access_token}}

### 0-3. 부스 신청 승인 (행사 관리자) - 실제 Booth 엔티티 생성됨
@applicationId = 9
PUT {{baseUrl}}/api/booth/applications/{{applicationId}}/status
Authorization: Bearer {{access_token}}
Content-Type: application/json

{
  "statusCode": "APPROVED",
  "adminComment": "부스 신청이 승인되었습니다. 체험 프로그램을 등록해주세요."
}

### 0-4. 결제 상태 업데이트 (관리자)
PUT {{baseUrl}}/api/booth/applications/{{applicationId}}/payment-status
Authorization: Bearer {{access_token}}
Content-Type: application/json

{
  "paymentStatusCode": "PAID",
  "adminComment": "부스 운영비 결제가 완료되었습니다."
}





### ===============================
### 1. 부스 체험 등록 (부스 담당자)
### ===============================
POST {{baseUrl}}/api/booth-experiences/booths/{{boothId}}
Content-Type: application/json
Authorization: Bearer {{access_token}}

{
  "title": "VR 체험존",
  "description": "최신 VR 기술을 이용한 가상현실 체험",
  "experienceDate": "2025-08-20",
  "startTime": "09:00:00",
  "endTime": "18:00:00",
  "durationMinutes": 10,
  "maxCapacity": 4,
  "allowWaiting": true,
  "maxWaitingCount": 20,
  "allowDuplicateReservation": true,
  "isReservationEnabled": true
}

### ===============================
### 2. 특정 부스의 체험 목록 조회 (부스 담당자용)
### ===============================
GET {{baseUrl}}/api/booth-experiences/booths/{{boothId}}
Content-Type: application/json
Authorization: Bearer {{access_token}}

### ===============================
### 3. 예약 가능한 모든 부스 체험 목록 조회 (참여자용)
### ===============================
GET {{baseUrl}}/api/booth-experiences/available
Content-Type: application/json

### ===============================
### 4. 부스 체험 예약 신청 (참여자)
### ===============================
POST {{baseUrl}}/api/booth-experiences/{{experienceId}}/reservations?userId={{userId}}
Content-Type: application/json

{
  "notes": "처음 VR 체험이라 도움이 필요할 수 있습니다"
}

### ===============================
### 5. 특정 체험의 예약자 목록 조회 (부스 담당자용)
### ===============================
GET {{baseUrl}}/api/booth-experiences/{{experienceId}}/reservations
Content-Type: application/json
Authorization: Bearer {{access_token}}

### ===============================
### 6. 내 예약 목록 조회 (참여자용)
### ===============================
GET {{baseUrl}}/api/booth-experiences/my-reservations?userId={{userId}}
Content-Type: application/json

### ===============================
### 7. 예약 상태 변경: 대기중 -> 입장가능 (부스 담당자)
### ===============================
PUT {{baseUrl}}/api/booth-experiences/reservations/{{reservationId}}/status
Content-Type: application/json
Authorization: Bearer {{access_token}}

{
  "statusCode": "READY",
  "notes": "1번 대기자님 입장 가능합니다"
}

### ===============================
### 8. 예약 상태 변경: 입장가능 -> 체험중 (부스 담당자)
### ===============================
PUT {{baseUrl}}/api/booth-experiences/reservations/{{reservationId}}/status
Content-Type: application/json
Authorization: Bearer {{access_token}}

{
  "statusCode": "IN_PROGRESS",
  "notes": "체험 시작"
}

### ===============================
### 9. 예약 상태 변경: 체험중 -> 완료 (부스 담당자)
### ===============================
PUT {{baseUrl}}/api/booth-experiences/reservations/{{reservationId}}/status
Content-Type: application/json
Authorization: Bearer {{access_token}}

{
  "statusCode": "COMPLETED",
  "notes": "체험 완료, 만족도 높음"
}

### ===============================
### 10. 예약 취소 (참여자) - 본인 인증 포함
### ===============================
DELETE {{baseUrl}}/api/booth-experiences/reservations/{{reservationId}}
Content-Type: application/json
Authorization: Bearer {{access_token}}

### ===============================
### 11. 대기열 현황 조회
### ===============================
GET {{baseUrl}}/api/booth-experiences/{{experienceId}}/queue-status
Content-Type: application/json







### ===============================
### 테스트 시나리오 예제
### ===============================

### 시나리오 1: 새로운 체험 등록 후 예약까지의 전체 플로우
### Step 1: 체험 등록
POST {{baseUrl}}/api/booth-experiences/booths/1
Content-Type: application/json
Authorization: Bearer {{access_token}}

{
  "title": "AI 그림 그리기 체험",
  "description": "AI와 함께하는 디지털 아트 창작 체험",
  "experienceDate": "2025-02-16",
  "startTime": "10:00:00",
  "endTime": "17:00:00",
  "durationMinutes": 15,
  "maxCapacity": 2,
  "allowWaiting": true,
  "maxWaitingCount": 10,
  "allowDuplicateReservation": false,
  "isReservationEnabled": true
}

### Step 2: 예약 가능한 체험 목록에서 확인
GET {{baseUrl}}/api/booth-experiences/available
Content-Type: application/json

### Step 3: 예약 신청 (여러 사용자)
POST {{baseUrl}}/api/booth-experiences/2/reservations?userId=38
Content-Type: application/json

{
  "notes": "첫 번째 예약자입니다"
}

###
POST {{baseUrl}}/api/booth-experiences/2/reservations?userId=2
Content-Type: application/json

{
  "notes": "두 번째 예약자입니다"
}

###
POST {{baseUrl}}/api/booth-experiences/2/reservations?userId=3
Content-Type: application/json

{
  "notes": "세 번째 예약자입니다 (대기열)"
}

### Step 4: 대기열 상황 확인
GET {{baseUrl}}/api/booth-experiences/2/queue-status
Content-Type: application/json

### ===============================
### 시나리오 2: 상태 변경 플로우 테스트
### ===============================

### 첫 번째 대기자를 READY로 변경
PUT {{baseUrl}}/api/booth-experiences/reservations/1/status
Content-Type: application/json
Authorization: Bearer {{access_token}}

{
  "statusCode": "READY",
  "notes": "첫 번째 대기자님 준비되셨으면 오세요"
}

### 두 번째 대기자를 READY로 변경 
PUT {{baseUrl}}/api/booth-experiences/reservations/2/status
Content-Type: application/json
Authorization: Bearer {{access_token}}

{
  "statusCode": "READY",
  "notes": "두 번째 대기자님도 준비 완료"
}

### 첫 번째 사용자 체험 시작
PUT {{baseUrl}}/api/booth-experiences/reservations/1/status
Content-Type: application/json
Authorization: Bearer {{access_token}}

{
  "statusCode": "IN_PROGRESS",
  "notes": "체험 시작"
}

### 첫 번째 사용자 체험 완료 (자동으로 다음 대기자 호출됨)
PUT {{baseUrl}}/api/booth-experiences/reservations/1/status
Content-Type: application/json
Authorization: Bearer {{access_token}}

{
  "statusCode": "COMPLETED",
  "notes": "체험 완료 - 매우 만족"
}

### 완료 후 대기열 상황 재확인
GET {{baseUrl}}/api/booth-experiences/3/queue-status
Content-Type: application/json

### ===============================
### 에러 케이스 테스트
### ===============================

### 존재하지 않는 부스에 체험 등록 시도
POST {{baseUrl}}/api/booth-experiences/booths/999
Content-Type: application/json
Authorization: Bearer {{access_token}}

{
  "title": "존재하지 않는 부스 테스트",
  "description": "에러 발생 테스트",
  "experienceDate": "2025-02-15",
  "startTime": "09:00:00",
  "endTime": "18:00:00",
  "durationMinutes": 10,
  "maxCapacity": 4
}

### 존재하지 않는 사용자 예약 시도
POST {{baseUrl}}/api/booth-experiences/1/reservations?userId=999
Content-Type: application/json

{
  "notes": "존재하지 않는 사용자"
}

### 잘못된 상태 변경 시도 (WAITING -> COMPLETED 직접 변경)
PUT {{baseUrl}}/api/booth-experiences/reservations/1/status
Content-Type: application/json
Authorization: Bearer {{access_token}}

{
  "statusCode": "COMPLETED",
  "notes": "잘못된 상태 변경 테스트"
}

### 이미 완료된 예약 상태 변경 시도
PUT {{baseUrl}}/api/booth-experiences/reservations/1/status
Content-Type: application/json
Authorization: Bearer {{access_token}}

{
  "statusCode": "CANCELLED",
  "notes": "완료된 예약 취소 시도"
}