@access_token=eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIzNSIsImVtYWlsIjoiYWRtaW40QGZhaXJwbGF5LmNvbSIsInJvbGUiOiLsoITssrQg6rSA66as7J6QIiwicm9sZUlkIjoxLCJpYXQiOjE3NTQ4ODA0MjAsImV4cCI6MTc1NDg4MDcyMH0.avn6u-ZdoVa6H-17H00g4SvIpoa5ODZKpYJCh8evtKA

### 1단계: 파일 임시 업로드
# 먼저 이 요청을 실행하여 파일을 임시 업로드하고, 응답으로 받은 JSON에서
# "key", "name", "type" 값을 복사하여 2단계 요청에 사용하세요.
# 파일 크기(fileSize)는 파일 탐색기에서 직접 확인해야 합니다.
# 업로드된 파일은 CloudFront CDN을 통해 제공됩니다.
POST http://localhost:8080/api/uploads/temp
Content-Type: multipart/form-data; boundary=boundary
Origin: http://localhost:5173

--boundary
# 아래 "file.png"를 실제 업로드할 파일의 경로로 변경하세요. (예: C:/Users/test/image.png)
Content-Disposition: form-data; name="file"; filename="gd2.png"
Content-Type: image/png

< D:\myWork\FairPlay\FairPlay_BE\src\main\files\gd2.png
--boundary--


### 2단계: 행사 상세 정보 저장 (파일 영구 전환)
# 1단계 완료 후, 아래 요청을 실행하세요.
# events/{eventId}를 실제 행사 ID로, {{access_token}}을 실제 JWT 토큰으로 변경해야 합니다.
# IntelliJ HTTP Client의 경우, 별도의 `http-client.env.json` 파일에 토큰을 변수로 저장하면 편리합니다.
#
# **** 중요 ****
# 아래 JSON 본문의 값들을 1단계 요청의 응답값으로 채워주세요.
# - content: <img src="...">의 key= 부분에 1단계의 "key" 값을 URL 인코딩하여 붙여넣기
# - s3Key: 1단계의 "key" 값
# - originalFileName: 1단계의 "name" 값
# - fileType: 1단계의 "type" 값
# - fileSize: 실제 파일 크기 (bytes)
# 
# 파일은 CloudFront CDN URL로 자동 변환되어 응답됩니다.
PATCH http://localhost:8080/api/events/1/details
Content-Type: application/json
Authorization: Bearer {{access_token}}
Origin: http://localhost:5173

{
  "content": "<p>행사 내용입니다.</p><img src=\"/api/uploads/download?key=uploads/tmp2025-08-11/cd153674-6709-4337-a007-8a0ecd41fb34.png\">",
  "tempFiles": [
    {
      "s3Key": "uploads/tmp2025-08-11/cd153674-6709-4337-a007-8a0ecd41fb34.png",
      "originalFileName": "gd2.png",
      "fileType": "image/png",
      "fileSize": 12345,
      "usage": "content"
    }
  ]
}

### 3단계: 파일 삭제 테스트
# 이전에 업로드하여 DB에 저장된 파일의 ID를 사용하여 삭제를 테스트합니다.
# {fileId}를 실제 파일 ID로 변경하세요. (DB에서 확인)
DELETE http://localhost:8080/api/files/2
Authorization: Bearer {{access_token}}
Origin: http://localhost:5173

### 4단계: 이미지 교체 테스트 (기존 파일 삭제 + 새 파일 업로드)
# 1. 먼저 1단계 요청을 다시 실행하여 새로운 임시 파일 정보를 얻습니다.
# 2. 아래 JSON 본문에서 "deletedFileIds"에 삭제할 기존 파일의 ID를 넣고,
#    "tempFiles"에 1단계에서 얻은 새로운 임시 파일 정보를 채워넣습니다.
# 3. {eventId}를 실제 행사 ID로, {{access_token}}을 실제 JWT 토큰으로 변경하세요.
PATCH http://localhost:8080/api/events/1/details
Content-Type: application/json
Authorization: Bearer {{access_token}}
Origin: http://localhost:5173

{
  "content": "<p>행사 내용입니다. (업데이트됨)</p><img src=\"/api/uploads/download?여기에_1단계_key값_붙여넣기\">",
  "policy": "환불 정책입니다. (업데이트됨)",
  "startDate": "2025-10-01",
  "endDate": "2025-10-03",
  "mainCategoryId": 1,
  "subCategoryId": 101,
  "deletedFileIds": [
    4
  ],
  "tempFiles": [
    {
      "s3Key": "여기에_1단계_key값_붙여넣기",
      "originalFileName": "malone.jpg",
      "fileType": "image/jpeg",
      "fileSize": 67890,
      "usage": "content"
    }
  ]
}

### 행사 썸네일 및 숨김 상태 업데이트
@updateEventId = 4
PATCH http://localhost:8080/api/events/{{updateEventId}}
Content-Type: application/json
Authorization: Bearer {{access_token}}

{
  "hidden": false,
  "thumbnailFile": {
    "s3Key": "uploads/tmp2025-08-08/22d28f01-8c81-46e6-8226-fff0190e7721.jpg",
    "originalFileName": "malone.jpg",
    "fileType": "image/jpeg",
    "fileSize": 67890
  }
}

